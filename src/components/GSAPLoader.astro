---
// GSAP Loader Component - Contains all GSAP functionality
---

<script>
  // Global flag to prevent any double initialization
  if (!(window as any).gsapInitializationStarted) {
    (window as any).gsapInitializationStarted = true;
    
    // Defer GSAP loading until page is loaded for better performance
    function loadGSAP() {
      // Double check to prevent race conditions
      if ((window as any).gsapLoaded) {
        console.log('GSAP already loaded, skipping...');
        return;
      }
      
      console.log('Starting GSAP initialization...');
      
      // Import GSAP from node_modules
      import('gsap').then(({ gsap }) => {
        return Promise.all([
          import('gsap/ScrollTrigger'),
          import('gsap/Draggable')
        ]).then(([{ ScrollTrigger }, { Draggable }]) => {
          // Final check before initialization
          if (!(window as any).gsapLoaded) {
            // Register plugins
            gsap.registerPlugin(ScrollTrigger, Draggable);

            // Make GSAP available globally
            (window as any).gsap = gsap;
            (window as any).ScrollTrigger = ScrollTrigger;
            (window as any).Draggable = Draggable;
            
            // Mark as loaded to prevent duplicate loading
            (window as any).gsapLoaded = true;

            console.log('✅ GSAP loaded from node_modules successfully');
            
            // Initialize all GSAP functionality
            initializeAllGSAPFeatures();
            
          } else {
            console.log('GSAP was loaded by another process, skipping event dispatch');
          }
        });
      }).catch(error => {
        console.error('❌ Failed to load GSAP:', error);
        // Reset flag so fallback can try
        (window as any).gsapInitializationStarted = false;
      });
    }

    // ==========================================
    // GSAP UTILITIES AND PRESETS
    // ==========================================
    
    // GSAP Utilities
    const GSAPUtils = {
      isAvailable: () => typeof gsap !== 'undefined' && typeof ScrollTrigger !== 'undefined',
      
      // Safe GSAP execution
      safeExecute: (callback: () => any, fallback: (() => any) | null = null) => {
        if (GSAPUtils.isAvailable()) {
          try {
            return callback();
          } catch (error) {
            console.error('GSAP execution error:', error);
            return fallback ? fallback() : null;
          }
        } else {
          console.warn('GSAP not available');
          return fallback ? fallback() : null;
        }
      }
    };

    // Animation presets with proper typing
    const ANIMATION_PRESETS: Record<string, any> = {
      fadeUp: { y: 60, opacity: 0 },
      fadeDown: { y: -60, opacity: 0 },
      fadeLeft: { x: -60, opacity: 0 },
      fadeRight: { x: 60, opacity: 0 },
      scaleUp: { scale: 0.8, opacity: 0 },
      slideUp: { y: 30, opacity: 0 },
      bounce: { y: 40, opacity: 0, scale: 0.9 },
      elastic: { scale: 0, opacity: 0 },
      badge: { y: 30, opacity: 0, scale: 0.8 },
      icon: { rotation: -15, scale: 0 },
      textReveal: { y: 40, opacity: 0, skewY: 3 },
      gentleFade: { y: 20, opacity: 0, scale: 0.95 }
    };

    const EASING_PRESETS = {
      smooth: "power2.out",
      dramatic: "power3.out", 
      bounce: "back.out(1.7)",
      elastic: "elastic.out(1, 0.3)",
      natural: "sine.inOut"
    };

    // ==========================================
    // HERO TIMELINE
    // ==========================================
    let heroTimelineCreated = false;
    (window as any).heroTimelineCreated = heroTimelineCreated;

    function createHeroTimeline() {
      if (heroTimelineCreated) {
        console.log('Hero timeline already created, skipping...');
        return null;
      }
      
      const heroTitle = document.querySelector('.hero-title');
      if (!heroTitle) {
        console.warn('Hero elements not found, retrying in 500ms...');
        setTimeout(() => {
          if (!heroTimelineCreated) {
            createHeroTimeline();
          }
        }, 500);
        return null;
      }
      
      const tl = gsap.timeline({ defaults: { ease: EASING_PRESETS.smooth } });

      // Hero sequence - Subtle animations from natural state
      tl.from('.hero-title', 
        { y: 20, skewY: 2, duration: 1.0, ease: EASING_PRESETS.smooth }, 0.1)
        
      .from('.hero-title + p', 
        { y: 15, opacity: 0.3, duration: 0.8, ease: EASING_PRESETS.smooth }, 0.3)
        
      .from('.hero-visual', 
        { x: 30, scale: 0.98, duration: 1.0, ease: EASING_PRESETS.smooth }, 0.4)
        
      .from('.hero-cta', 
        { y: 10, scale: 0.98, duration: 0.6, ease: EASING_PRESETS.smooth }, 0.6)
        
      .from('.hero-social a', 
        { scale: 0.9, duration: 0.4, stagger: 0.08, ease: EASING_PRESETS.smooth }, 0.8)
        
      .from('.hero-stat', 
        { 
          y: 10, scale: 0.98, duration: 0.6, stagger: 0.1, ease: EASING_PRESETS.smooth,
          onComplete: () => initGSAPCounters()
        }, 1.0)
        
      .from('.tech-title', 
        { y: 15, scale: 0.98, duration: 0.6, ease: EASING_PRESETS.smooth }, 1.2)
        
      .from('.tech-title svg', 
        { scale: 0.9, duration: 0.4, ease: EASING_PRESETS.smooth }, 1.3)
        
      .from('.tech-carousel-container', 
        { y: 20, scale: 0.98, duration: 0.8, ease: EASING_PRESETS.smooth }, 1.4)
        
      .from('.tech-carousel', 
        { y: 10, duration: 0.6, ease: EASING_PRESETS.smooth }, 1.5)
        
      .from('.tech-item', 
        { 
          scale: 0.95, 
          y: 8,
          duration: 0.5, 
          stagger: 0.05, 
          ease: EASING_PRESETS.smooth
        }, 1.6);

      heroTimelineCreated = true;
      (window as any).heroTimelineCreated = true;
      console.log('✅ Hero timeline created successfully');
      return tl;
    }

    // ==========================================
    // BACKGROUND ANIMATIONS
    // ==========================================
    let backgroundAnimationsCreated = false;
    (window as any).backgroundAnimationsCreated = backgroundAnimationsCreated;

    function createBackgroundAnimations() {
      if (backgroundAnimationsCreated) {
        console.log('Background animations already created, skipping...');
        return null;
      }
      
      const backgroundElements = document.querySelector('.blur-2xl, .blur-3xl, .animate-bounce');
      if (!backgroundElements) {
        console.warn('Background elements not found, skipping background animations...');
        backgroundAnimationsCreated = true;
        return null;
      }
      
      const tl = gsap.timeline();

      // Background gradients - subtle entrance
      tl.from('.blur-2xl, .blur-3xl', 
        { 
          scale: 0.9, opacity: 0.5, duration: 2.0, stagger: 0.5, ease: EASING_PRESETS.smooth,
          onComplete: function() {
            // Continuous floating after initial animation
            gsap.to('.blur-2xl, .blur-3xl', {
              x: "random(-10, 10)",
              y: "random(-15, 15)",
              duration: "random(8, 12)",
              ease: EASING_PRESETS.natural,
              yoyo: true,
              repeat: -1,
              stagger: 0.5
            });
          }
        }, 0)
        
      // Floating particles - subtle entrance
      .from('.animate-bounce', 
        { 
          scale: 0.8, opacity: 0.3, duration: 1.2, stagger: 0.3, ease: EASING_PRESETS.smooth,
          onComplete: function() {
            // Continuous floating
            gsap.to('.animate-bounce', {
              y: -8,
              duration: 2,
              ease: EASING_PRESETS.natural,
              yoyo: true,
              repeat: -1,
              stagger: 0.3
            });
          }
        }, 2.0);

      backgroundAnimationsCreated = true;
      (window as any).backgroundAnimationsCreated = true;
      console.log('✅ Background animations created successfully');
      return tl;
    }

    // ==========================================
    // SCROLL ANIMATIONS
    // ==========================================
    function createScrollAnimations() {
      const animationMap = {
        '.fade-up': 'fadeUp',
        '.fade-left': 'fadeLeft', 
        '.fade-right': 'fadeRight',
        '.scale-up': 'scaleUp'
      };

      Object.entries(animationMap).forEach(([selector, preset]) => {
        const elements = document.querySelectorAll(selector);
        if (elements.length > 0) {
          gsap.fromTo(elements, 
            ANIMATION_PRESETS[preset],
            {
              opacity: 1,
              y: 0,
              x: 0,
              scale: 1,
              duration: 0.8,
              ease: EASING_PRESETS.smooth,
              scrollTrigger: {
                trigger: elements[0],
                start: "top 80%",
                toggleActions: "play none none reverse"
              }
            }
          );
        }
      });
    }

    // ==========================================
    // GSAP COUNTERS
    // ==========================================
    function initGSAPCounters() {
      const counters = document.querySelectorAll('.counter');
      
      counters.forEach((counter) => {
        const targetAttr = counter.getAttribute('data-target');
        if (!targetAttr) return;
        
        const target = parseFloat(targetAttr);
        const suffix = counter.getAttribute('data-suffix') || '';
        
        if (isNaN(target)) return;
        
        const obj = { value: 0 };
        
        gsap.to(obj, {
          value: target,
          duration: 2,
          ease: EASING_PRESETS.smooth,
          onUpdate: function() {
            if (suffix === 'K') {
              counter.textContent = (obj.value / 1000).toFixed(1) + 'K';
            } else if (Number.isInteger(target)) {
              counter.textContent = Math.round(obj.value) + suffix;
            } else {
              counter.textContent = obj.value.toFixed(1) + suffix;
            }
          }
        });
      });
    }

    // ==========================================
    // PORTFOLIO FUNCTIONALITY
    // ==========================================
    function initGSAPPortfolio() {
      const tabButtons = document.querySelectorAll('.portfolio-tab');
      const projectItems = document.querySelectorAll('.portfolio-item');
      const grid = document.querySelector('.projects-grid');
      
      if (!tabButtons.length || !projectItems.length || !grid) return;
      
      const filterProjects = (filter: string) => {
        const itemsArray = Array.from(projectItems);
        const itemsToHide = itemsArray.filter((item: Element) => {
          return filter !== 'all' && !item.classList.contains(filter);
        });
        
        const itemsToShow = itemsArray.filter((item: Element) => {
          return filter === 'all' || item.classList.contains(filter);
        });

        // Animate out items that should be hidden
        if (itemsToHide.length > 0) {
          gsap.to(itemsToHide, {
            opacity: 0,
            scale: 0.8,
            duration: 0.3,
            ease: EASING_PRESETS.smooth,
            onComplete: () => {
              itemsToHide.forEach((item: Element) => (item as HTMLElement).style.display = 'none');
              
              // Show and animate in the items that should be visible
              itemsToShow.forEach((item: Element) => {
                (item as HTMLElement).style.display = 'block';
              });
              
              gsap.fromTo(itemsToShow, 
                { opacity: 0, scale: 0.8, y: 20 },
                { 
                  opacity: 1, 
                  scale: 1, 
                  y: 0,
                  duration: 0.5, 
                  ease: EASING_PRESETS.smooth,
                  stagger: 0.1
                }
              );
            }
          });
        } else {
          // Just show items if nothing needs to be hidden
          itemsToShow.forEach((item: Element) => {
            (item as HTMLElement).style.display = 'block';
          });
          
          gsap.fromTo(itemsToShow, 
            { opacity: 0, scale: 0.8, y: 20 },
            { 
              opacity: 1, 
              scale: 1, 
              y: 0,
              duration: 0.5, 
              ease: EASING_PRESETS.smooth,
              stagger: 0.1
            }
          );
        }
      };

      // Add click handlers to tabs
      tabButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          
          // Update active tab
          tabButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');
          
          // Get filter value
          const filter = button.getAttribute('data-filter');
          if (filter) {
            filterProjects(filter);
          }
        });
      });

      // Initialize with 'all' filter
      filterProjects('all');
    }

    // ==========================================
    // TESTIMONIALS SLIDER
    // ==========================================
    function initGSAPTestimonials() {
      if (!GSAPUtils.isAvailable()) {
        console.warn('GSAP not available for testimonials');
        return;
      }

      const slider = document.querySelector('.testimonials-slider');
      const slides = document.querySelectorAll('.testimonial-slide');
      const prevBtn = document.querySelector('.testimonial-prev');
      const nextBtn = document.querySelector('.testimonial-next');
      const indicators = document.querySelectorAll('.testimonial-indicator');

      if (!slider || !slides.length) return;

      let currentSlide = 0;
      const totalSlides = slides.length;

      // Initialize slides
      gsap.set(slides, { opacity: 0, x: 100 });
      gsap.set(slides[0], { opacity: 1, x: 0 });

      const goToSlide = (index: number) => {
        if (index === currentSlide) return;

        const current = slides[currentSlide];
        const next = slides[index];

        // Animate out current slide
        gsap.to(current, {
          opacity: 0,
          x: index > currentSlide ? -100 : 100,
          duration: 0.5,
          ease: EASING_PRESETS.smooth
        });

        // Animate in next slide
        gsap.fromTo(next, 
          { opacity: 0, x: index > currentSlide ? 100 : -100 },
          { 
            opacity: 1, 
            x: 0, 
            duration: 0.5, 
            ease: EASING_PRESETS.smooth,
            delay: 0.1
          }
        );

        // Update indicators
        if (indicators.length) {
          indicators[currentSlide]?.classList.remove('active');
          indicators[index]?.classList.add('active');
        }

        currentSlide = index;
      };

      // Navigation handlers
      if (prevBtn) {
        prevBtn.addEventListener('click', () => {
          const prevIndex = currentSlide === 0 ? totalSlides - 1 : currentSlide - 1;
          goToSlide(prevIndex);
        });
      }

      if (nextBtn) {
        nextBtn.addEventListener('click', () => {
          const nextIndex = currentSlide === totalSlides - 1 ? 0 : currentSlide + 1;
          goToSlide(nextIndex);
        });
      }

      // Indicator handlers
      indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => goToSlide(index));
      });

      // Auto-play
      setInterval(() => {
        const nextIndex = currentSlide === totalSlides - 1 ? 0 : currentSlide + 1;
        goToSlide(nextIndex);
      }, 5000);
    }

    // ==========================================
    // TECH CAROUSEL DRAGGABLE
    // ==========================================
    function initTechCarouselDraggable(retryCount = 0) {
      const maxRetries = 5;
      
      const carousel = document.querySelector('.tech-carousel');
      if (!carousel) {
        if (retryCount < maxRetries) {
          setTimeout(() => initTechCarouselDraggable(retryCount + 1), 1000);
        }
        return;
      }

      if (typeof Draggable === 'undefined') {
        console.warn('Draggable not available, skipping tech carousel draggable');
        return;
      }

      try {
        Draggable.create(carousel, {
          type: "x",
          bounds: {
            minX: -(carousel.scrollWidth - carousel.clientWidth),
            maxX: 0
          },
          inertia: true,
          snap: {
            x: function(endValue) {
              const itemWidth = 200; // Approximate item width
              return Math.round(endValue / itemWidth) * itemWidth;
            }
          },
          onDrag: function() {
            // Optional: Add visual feedback during drag
          },
          onThrowUpdate: function() {
            // Optional: Handle throw updates
          }
        });

        console.log('✅ Tech carousel draggable initialized');
      } catch (error) {
        console.error('❌ Error initializing tech carousel draggable:', error);
      }
    }

    // ==========================================
    // MAIN GSAP INITIALIZATION
    // ==========================================
    let gsapInitialized = false;

    function initializeAllGSAPFeatures() {
      if (gsapInitialized) {
        console.log('🔄 GSAP already initialized, skipping...');
        return;
      }
      
      console.log('🔍 Checking GSAP availability...', {
        gsap: typeof gsap !== 'undefined',
        ScrollTrigger: typeof ScrollTrigger !== 'undefined',
        Draggable: typeof Draggable !== 'undefined',
        heroTimelineCreated: (window as any).heroTimelineCreated || false,
        backgroundAnimationsCreated: (window as any).backgroundAnimationsCreated || false
      });
      
      if (typeof gsap !== 'undefined' && typeof ScrollTrigger !== 'undefined' && typeof Draggable !== 'undefined') {
        try {
          // Mark as initialized FIRST to prevent any race conditions
          gsapInitialized = true;
          
          // Set GSAP defaults
          gsap.defaults({ ease: EASING_PRESETS.smooth, duration: 0.8 });
          
          console.log('🚀 Initializing all GSAP animations...');
          
          // 1. Initialize Hero and background animations
          console.log('📝 Step 1: Initializing Hero and background animations');
          createHeroTimeline();
          createBackgroundAnimations();
          
          // 2. Initialize scroll animations
          console.log('📝 Step 2: Initializing scroll animations');
          createScrollAnimations();
          
          // 3. Initialize Portfolio functionality
          console.log('📝 Step 3: Initializing Portfolio functionality');
          initGSAPPortfolio();
          
          // 4. Initialize Testimonials slider
          console.log('📝 Step 4: Initializing Testimonials slider');
          initGSAPTestimonials();
          
          // 5. Initialize Tech Carousel Draggable (with delay)
          console.log('📝 Step 5: Initializing Tech Carousel Draggable');
          setTimeout(() => {
            initTechCarouselDraggable();
          }, 2500);
          
          console.log('✅ All GSAP animations initialized successfully!');
        } catch (error) {
          console.error('❌ Error initializing GSAP animations:', error);
          // Reset flag if initialization failed
          gsapInitialized = false;
        }
      } else {
        console.warn('⚠️ GSAP not available. Animations will not work.');
      }
    }

    // Load GSAP after page content is loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', loadGSAP);
    } else {
      // Use requestIdleCallback for better performance if available
      if ('requestIdleCallback' in window) {
        requestIdleCallback(loadGSAP, { timeout: 1000 });
      } else {
        setTimeout(loadGSAP, 100);
      }
    }
  } else {
    console.log('GSAP initialization already started by another instance');
  }
</script>
