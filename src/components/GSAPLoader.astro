---
// GSAP Loader Component - Complete Animation System
---

<script>
  // Global flag to prevent any double initialization
  if (!(window as any).gsapAnimationsInitialized) {
    (window as any).gsapAnimationsInitialized = true;
    
    // Animation presets
    const ANIMATION_PRESETS = {
      fadeUp: { y: 60, opacity: 0 },
      fadeDown: { y: -60, opacity: 0 },
      fadeLeft: { x: -60, opacity: 0 },
      fadeRight: { x: 60, opacity: 0 },
      scaleUp: { scale: 0.8, opacity: 0 },
      slideUp: { y: 30, opacity: 0 },
      bounce: { y: 40, opacity: 0, scale: 0.9 },
      elastic: { scale: 0, opacity: 0 },
      badge: { y: 30, opacity: 0, scale: 0.8 },
      icon: { rotation: -15, scale: 0 },
      textReveal: { y: 40, opacity: 0, skewY: 3 },
      gentleFade: { y: 20, opacity: 0, scale: 0.95 }
    };

    const EASING_PRESETS = {
      smooth: "power2.out",
      dramatic: "power3.out", 
      bounce: "back.out(1.7)",
      elastic: "elastic.out(1, 0.3)",
      natural: "sine.inOut"
    };

    // Load and initialize GSAP with all animations
    function loadGSAP() {
      console.log('🚀 Loading GSAP and initializing all animations...');
      
      // Import GSAP from node_modules
      import('gsap').then(({ gsap }) => {
        return Promise.all([
          import('gsap/ScrollTrigger'),
          import('gsap/Draggable')
        ]).then(([{ ScrollTrigger }, { Draggable }]) => {
          // Register plugins
          gsap.registerPlugin(ScrollTrigger, Draggable);
          
          console.log('✅ GSAP loaded successfully, initializing animations...');
          
          // Initialize all animations immediately
          initializeAllAnimations(gsap, ScrollTrigger, Draggable);
        });
      }).catch(error => {
        console.error('❌ Failed to load GSAP:', error);
      });
    }

    // Complete animation initialization function
    function initializeAllAnimations(gsap, ScrollTrigger, Draggable) {
      let heroTimelineCreated = false;
      let backgroundAnimationsCreated = false;
      
      // Hero Timeline
      function createHeroTimeline() {
        if (heroTimelineCreated) return null;
        
        const heroTitle = document.querySelector('.hero-title');
        if (!heroTitle) {
          setTimeout(() => {
            if (!heroTimelineCreated) createHeroTimeline();
          }, 500);
          return null;
        }
        
        const tl = gsap.timeline({ defaults: { ease: EASING_PRESETS.smooth } });

        // Hero sequence - Subtle animations from natural state
        tl.from('.hero-title', 
          { y: 20, skewY: 2, duration: 1.0, ease: EASING_PRESETS.smooth }, 0.1)
          
        .from('.hero-title + p', 
          { y: 15, opacity: 0.3, duration: 0.8, ease: EASING_PRESETS.smooth }, 0.3)
          
        .from('.hero-visual', 
          { x: 30, scale: 0.98, duration: 1.0, ease: EASING_PRESETS.smooth }, 0.4)
          
        .from('.hero-cta', 
          { y: 10, scale: 0.98, duration: 0.6, ease: EASING_PRESETS.smooth }, 0.6)
          
        .from('.hero-social a', 
          { scale: 0.9, duration: 0.4, stagger: 0.08, ease: EASING_PRESETS.smooth }, 0.8)
          
        .from('.hero-stat', 
          { 
            y: 10, scale: 0.98, duration: 0.6, stagger: 0.1, ease: EASING_PRESETS.smooth,
            onComplete: () => initGSAPCounters(gsap)
          }, 1.0)
          
        .from('.tech-title', 
          { y: 15, scale: 0.98, duration: 0.6, ease: EASING_PRESETS.smooth }, 1.2)
          
        .from('.tech-title svg', 
          { scale: 0.9, duration: 0.4, ease: EASING_PRESETS.smooth }, 1.3)
          
        .from('.tech-carousel-container', 
          { y: 20, scale: 0.98, duration: 0.8, ease: EASING_PRESETS.smooth }, 1.4)
          
        .from('.tech-carousel', 
          { y: 10, duration: 0.6, ease: EASING_PRESETS.smooth }, 1.5)
          
        .from('.tech-item', 
          { 
            scale: 0.95, 
            y: 8,
            duration: 0.5, 
            stagger: 0.05, 
            ease: EASING_PRESETS.smooth
          }, 1.6);

        heroTimelineCreated = true;
        console.log('✅ Hero timeline created');
        return tl;
      }

      // Background animations
      function createBackgroundAnimations() {
        if (backgroundAnimationsCreated) return null;
        
        const backgroundElements = document.querySelector('.blur-2xl, .blur-3xl, .animate-bounce');
        if (!backgroundElements) {
          backgroundAnimationsCreated = true;
          return null;
        }
        
        const tl = gsap.timeline();

        // Background gradients - subtle entrance
        tl.from('.blur-2xl, .blur-3xl', 
          { 
            scale: 0.9, opacity: 0.5, duration: 2.0, stagger: 0.5, ease: EASING_PRESETS.smooth,
            onComplete: function() {
              // Continuous floating after initial animation
              gsap.to('.blur-2xl, .blur-3xl', {
                x: "random(-10, 10)",
                y: "random(-15, 15)",
                duration: "random(8, 12)",
                ease: EASING_PRESETS.natural,
                yoyo: true,
                repeat: -1,
                stagger: 0.5
              });
            }
          }, 0)
          
        // Floating particles - subtle entrance
        .from('.animate-bounce', 
          { 
            scale: 0.8, opacity: 0.3, duration: 1.2, stagger: 0.3, ease: EASING_PRESETS.smooth,
            onComplete: function() {
              // Continuous floating
              gsap.to('.animate-bounce', {
                y: -8,
                duration: 2,
                ease: EASING_PRESETS.natural,
                yoyo: true,
                repeat: -1,
                stagger: 0.3
              });
            }
          }, 2.0);

        backgroundAnimationsCreated = true;
        console.log('✅ Background animations created');
        return tl;
      }

      // GSAP Counters
      function initGSAPCounters(gsap) {
        const counters = document.querySelectorAll('.counter');
        
        counters.forEach((counter) => {
          const targetAttr = counter.getAttribute('data-target');
          const target = parseInt(targetAttr || '0');
          const suffix = counter.getAttribute('data-suffix');
          
          const counterObj = { value: 0 };
          
          gsap.to(counterObj, {
            value: target,
            duration: 2,
            ease: "power2.out",
            onUpdate: function() {
              const currentValue = Math.floor(counterObj.value);
              
              if (suffix === 'K') {
                const value = (counterObj.value / 1000).toFixed(1);
                counter.innerHTML = `${value}<span class="text-green-400 group-hover:text-green-300">K</span>`;
              } else if (counter.innerHTML.includes('+')) {
                counter.innerHTML = `${currentValue}<span class="text-green-400 group-hover:text-green-300">+</span>`;
              } else {
                counter.textContent = currentValue.toString();
              }
            }
          });
        });
      }

      // Scroll animations
      function createScrollAnimations() {
        const animationMap = {
          '.fade-up': 'fadeUp',
          '.fade-left': 'fadeLeft', 
          '.fade-right': 'fadeRight',
          '.scale-up': 'scaleUp'
        };

        Object.entries(animationMap).forEach(([selector, preset]) => {
          gsap.utils.toArray(selector).forEach((element, index) => {
            gsap.fromTo(element, 
              ANIMATION_PRESETS[preset],
              {
                y: 0, x: 0, scale: 1, opacity: 1, 
                duration: 0.8, 
                ease: EASING_PRESETS.smooth,
                scrollTrigger: { 
                  trigger: element, 
                  start: "top 85%",
                  toggleActions: "play none none reverse"
                }
              }
            );
          });
        });

        // Stagger animations
        gsap.utils.toArray('.stagger-children').forEach((container) => {
          const items = container.querySelectorAll('.stagger-item');
          gsap.fromTo(items,
            ANIMATION_PRESETS.fadeUp,
            {
              y: 0, opacity: 1, duration: 0.6, stagger: 0.15,
              scrollTrigger: { 
                trigger: container, 
                start: "top 85%",
                toggleActions: "play none none reverse"
              }
            }
          );
        });
      }

      // Tech carousel draggable
      function initTechCarouselDraggable() {
        const carousel = document.querySelector('.tech-carousel');
        if (!carousel) return;

        const container = carousel.parentElement;
        if (!container) return;

        const containerWidth = container.offsetWidth;
        const carouselWidth = carousel.scrollWidth;
        const maxDrag = Math.min(0, containerWidth - carouselWidth);

        if (maxDrag >= 0) return;

        Draggable.create(carousel, {
          type: "x",
          bounds: { minX: maxDrag, maxX: 0 },
          inertia: true,
          dragResistance: 0.3,
          edgeResistance: 0.8,
          onPress: function() {
            carousel.style.animationPlayState = 'paused';
            carousel.style.cursor = 'grabbing';
            carousel.style.userSelect = 'none';
          },
          onRelease: function() {
            carousel.style.cursor = 'grab';
            carousel.style.userSelect = '';
            setTimeout(() => {
              if (carousel.style.animationPlayState === 'paused') {
                carousel.style.animationPlayState = 'running';
              }
            }, 2000);
          }
        });

        console.log('✅ Tech carousel draggable initialized');
      }

      // Portfolio functionality
      function initGSAPPortfolio() {
        const tabButtons = document.querySelectorAll('.portfolio-tab');
        const projectItems = document.querySelectorAll('.portfolio-item');
        const grid = document.querySelector('.projects-grid');
        
        if (!tabButtons.length || !projectItems.length || !grid) return;

        const filterProjects = (filter) => {
          const itemsToHide = Array.from(projectItems).filter(item => {
            if (filter === '*') return false;
            return !item.classList.contains(filter.replace('.', ''));
          });
          
          const itemsToShow = Array.from(projectItems).filter(item => {
            if (filter === '*') return true;
            return item.classList.contains(filter.replace('.', ''));
          });
          
          const tl = gsap.timeline();
          
          tl.to(projectItems, {
            opacity: 0,
            y: 30,
            scale: 0.9,
            duration: 0.3,
            ease: "power2.inOut",
            stagger: 0.05
          })
          .set(itemsToHide, { display: 'none' })
          .set(itemsToShow, { display: 'block' })
          .to(itemsToShow, {
            opacity: 1,
            y: 0,
            scale: 1,
            duration: 0.4,
            ease: "power2.out",
            stagger: 0.08
          });
        };

        tabButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            e.preventDefault();
            const filter = button.getAttribute('data-filter') || '*';
            
            tabButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            
            filterProjects(filter);
          });
        });

        // Initialize with first tab
        if (tabButtons[0]) {
          const firstFilter = tabButtons[0].getAttribute('data-filter') || '*';
          filterProjects(firstFilter);
        }

        console.log('✅ Portfolio functionality initialized');
      }

      // Testimonials slider
      function initGSAPTestimonials() {
        const track = document.querySelector('.testimonials-track');
        const dots = document.querySelectorAll('.testimonial-dot');
        const prevBtn = document.querySelector('#testimonialPrevBtn');
        const nextBtn = document.querySelector('#testimonialNextBtn');
        const slider = document.querySelector('.testimonials-slider');
        const testimonialItems = document.querySelectorAll('.testimonial-item');
        
        if (!track || !dots.length || !prevBtn || !nextBtn || !slider || !testimonialItems.length) {
          return;
        }
        
        let currentSlide = 0;
        const totalSlides = 3;
        let autoplayTimer = null;
        let isAnimating = false;
        let isPaused = false;
        
        const slideToIndex = (index, direction = 'next') => {
          if (isAnimating || index === currentSlide) return;
          
          isAnimating = true;
          const offset = -index * 100;
          
          gsap.to(track, {
            x: `${offset}%`,
            duration: 0.6,
            ease: "power2.inOut",
            onComplete: () => {
              currentSlide = index;
              updateDots();
              isAnimating = false;
            }
          });
        };
        
        const updateDots = () => {
          dots.forEach((dot, index) => {
            dot.classList.toggle('active', index === currentSlide);
          });
        };
        
        const startAutoplay = () => {
          if (isPaused) return;
          autoplayTimer = setInterval(() => {
            if (!isPaused && !isAnimating) {
              const nextIndex = (currentSlide + 1) % totalSlides;
              slideToIndex(nextIndex);
            }
          }, 5000);
        };
        
        const stopAutoplay = () => {
          if (autoplayTimer) {
            clearInterval(autoplayTimer);
            autoplayTimer = null;
          }
        };
        
        // Event listeners
        nextBtn.addEventListener('click', () => {
          if (!isAnimating) {
            stopAutoplay();
            const nextIndex = (currentSlide + 1) % totalSlides;
            slideToIndex(nextIndex);
            startAutoplay();
          }
        });
        
        prevBtn.addEventListener('click', () => {
          if (!isAnimating) {
            stopAutoplay();
            const prevIndex = (currentSlide - 1 + totalSlides) % totalSlides;
            slideToIndex(prevIndex);
            startAutoplay();
          }
        });
        
        dots.forEach((dot, index) => {
          dot.addEventListener('click', () => {
            if (!isAnimating && index !== currentSlide) {
              stopAutoplay();
              slideToIndex(index);
              startAutoplay();
            }
          });
        });
        
        slider.addEventListener('mouseenter', () => {
          isPaused = true;
          stopAutoplay();
        });
        
        slider.addEventListener('mouseleave', () => {
          isPaused = false;
          startAutoplay();
        });
        
        // Initialize
        updateDots();
        startAutoplay();
        
        console.log('✅ Testimonials slider initialized');
      }

      // Initialize everything
      setTimeout(() => {
        // Add class to body to show animated elements
        document.body.classList.add('gsap-ready');
        console.log('🎬 GSAP ready - showing animated elements');
        
        // Small delay to ensure elements are visible before animating
        setTimeout(() => {
          createHeroTimeline();
          createBackgroundAnimations();
          createScrollAnimations();
          initGSAPPortfolio();
          initGSAPTestimonials();
          
          // Initialize draggable after a delay
          setTimeout(() => {
            initTechCarouselDraggable();
          }, 2500);
          
          console.log('✅ All GSAP animations initialized successfully!');
        }, 50);
      }, 100);
    }

    // Load GSAP after page content is loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', loadGSAP);
    } else {
      if ('requestIdleCallback' in window) {
        requestIdleCallback(loadGSAP, { timeout: 1000 });
      } else {
        setTimeout(loadGSAP, 100);
      }
    }
  } else {
    console.log('GSAP animations already initialized');
  }
</script>
